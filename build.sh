#!/bin/bash
#
# build.sh - A script to build, analyze, optimize, and generate assembly code 
#            for a given MiniC file
# 
# Usage: ./build.sh <filename> [DEBUG]
# 
# <filename> - The base name of the MiniC source file (excluding the .c extension)
# [DEBUG]    - (Optional) If present, the script will be run in debug mode
#
# This script is designed to automate the process of building and analyzing a 
# MiniC file, with optional debugging. It specifically performs the following tasks:
# 
#   1. Checks the number of command-line arguments, exits with an error if incorrect
#   2. Builds the frontend, optimization, and backend executables, with optional debug flag
#   3. Parses the MiniC file using Lex and Yacc
#   4. Performs semantic analysis on the MiniC file and exits if the analysis fails
#   5. Generates LLVM Intermediate Representation (IR) code from the parsed MiniC file
#   6. Optimizes the generated IR code
#   7. Generates x86 assembly code from the optimized IR
#   8. Cleans up by removing the executables
#
# On failure, the script will echo an error message and return a non-zero exit code.
# Successful execution results in x86 assembly code that is ready for compilation.
# 
# Author: Aimen Abdulaziz
# Date: Spring, 2023


# Define ANSI escape codes for colors
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# check the number of arguments 
if [ $# -lt 1 ] || [ $# -gt 2 ]; then
    echo -e "${RED}Usage: ./build.sh <filename> [DEBUG]${NC}"
    exit 1
fi

if [ "$2" == "DEBUG" ]; then
    debug_flag="DEBUG=1"
else
    debug_flag=""
fi

# Build all executables
build_executables() {
    (cd frontend && make $debug_flag)
    (cd optimization && make $debug_flag)
    (cd backend && make $debug_flag)
}

check_executable() {
    local executable="$1"
    local file="$2"
    local base="$3"

    $executable "$file"
    if [ $? -ne 0 ]; then
        echo -e "${RED}Non-zero exit code from $executable by $base.c${NC}"
        return 1
    fi
    return 0
}

# Extract the base name of the file without the .c extension
file="$1"
base=$(basename "$file" .c)

# Build the executables
build_executables

echo "Testing $file"

# Run the frontend and check for errors
if ! check_executable frontend/frontend "$file" "$base"; then exit 2; fi
echo "Result: Frontend successful"

# Optimize the IR generated by the frontend and check for errors
if ! check_executable optimization/optimizer "$base"_manual.ll "$base"; then exit 3; fi
echo "Result: Optimization successful"

# Generate x86 assembly code from the LLVM IR code using the codegen executable and check for errors
if ! check_executable backend/codegen "$base"_manual_opt.ll "$base"; then exit 4; fi
echo "Result: Assembly code generation successful"

# Clean the executables
(cd frontend && make clean)
(cd optimization && make clean)
(cd backend && make clean)
